// Code generated by togo. DO NOT EDIT.

package {{ .Package }}

import (
	"io"
	"net/http"
	"net/http/httptest"
)

// NewServer starts a new mock http.Server using the test data.
func NewServer() *httptest.Server {
	return httptest.NewServer(
		http.HandlerFunc(router),
	)
}

func router(w http.ResponseWriter, r *http.Request) {
	if len(r.URL.RawPath) != 0 {
		r.URL.Path = r.URL.RawPath
	}
	if len(r.URL.RawQuery) != 0 {
		r.URL.Path = r.URL.Path + "?" + r.URL.RawQuery
	}
	for _, route := range routes {
		if route.Method == r.Method && route.Path == r.URL.Path {
			for k, v := range route.Header {
				w.Header().Set(k, v)
			}
			w.WriteHeader(route.Status)
			io.WriteString(w, route.Body)
			return
		}
	}
	w.WriteHeader(404)
}

var routes = []struct {
	Method string
	Path   string
	Body   string
	Status int
	Header map[string]string
}{
    {{ range $index, $route := .Routes }}
	// {{ $route.Method }} {{ $route.Path }}
	{
		Method: {{ printf "%q" $route.Method }},
		Path:   {{ printf "%q" $route.Path }},
		Status: {{ $route.Status }},
		{{ if $route.Body -}}
		Body:   {{ printf "%q" $route.Body }},
		{{ end -}}
		Header: map[string]string{
			{{ range $key, $value := $route.Header -}}
			{{ printf "%q" $key }} : {{ printf "%q" $value }},
			{{ end }}
		},
	},
    {{ end }}
}

{{/*
//
// http responses
//

{{ range $index, $route := .Routes }}
{{ if $route.Body -}}
// {{ $route.Method }} {{ $route.Path }}
var response{{ $index }} = `{{ $route.Body }}`
{{ end }}
{{ end }}
*/}}
